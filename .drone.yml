---
kind: pipeline
type: docker
name: build
trigger: { event: [ push ] }
volumes: [ { name: cache, host: { path: /data/ci-cache-docker } } ]
steps:
- name: git
  image: alpine/git:latest
  commands:
  - echo $HOME
  - ls -al $HOME
  - printf $(git rev-parse --abbrev-ref HEAD) > BRANCH
  - cat BRANCH
  - git submodule update --init --recursive --depth 1
- name: build
  image: docker:24.0.7-alpine3.18
  volumes: [ { name: cache, path: /cache/docker } ]
  privileged: true
  environment:
    NAME: "oci.hack.bg/namada"
    USER: { from_secret: "oci-user" }
    PASS: { from_secret: "oci-pass" }
    MIRROR: "http://127.0.0.1:5000"
    DOCKER_DATA: "/cache/docker"
    DOCKER_HOST: "tcp://127.0.0.1:2375"
  commands:
  # Launch Docker daemon
  - nohup dockerd --tls=false --dns 1.1.1.1 --rootless=true --bridge=none --iptables=false --data-root "$DOCKER_DATA" --host="$DOCKER_HOST" --registry-mirror "$MIRROR" &
  - sleep 10
  - docker version; docker info
  - echo "\nLooking around...\n"; whoami; pwd; ls -al
  - echo "$PASS" | docker login -u "$USER" --password-stdin https://oci.hack.bg

  # Build image for managed Namada node, RPC proxy, and sync proxy
  - export IMAGE="$NAME:$(cat BRANCH | tr '/' '_' | tr '\n' ' ')"
  - 'printf "Name: $NAME\nImage: $IMAGE\n"'

  # Pull previous layers from cache
  - docker pull "$IMAGE" || true

  # Default image
  - docker build --push --network=host --cache-to=type=inline --cache-from="$IMAGE" -f Dockerfile -t "$IMAGE" .

  # Parameterized images:
  - export PARAMETERIZED="--push --network=host --cache-to=type=inline --cache-from="$IMAGE" -f Dockerfile.parameterized"

  # Image that connects to all known peers directly
  - export VARIANT="$IMAGE-all-direct"
  - >+
    export PEERS="$(docker run -eBUILD_COLOR_VARIANT=direct -v $PWD:/app denoland/deno:1.46.3 run --allow-read=peers.json --allow-env=BUILD_COLOR_VARIANT /app/peers.js)"
  - echo "Building $VARIANT with persistent peers $PEERS"
  - docker build $PARAMETERIZED -t "$VARIANT" --build-arg "PEERS=$PEERS" .

  ### Image that connects to all known peers throgh green proxy with default config
  - export VARIANT="$IMAGE-all-green"
  - >+
    #export PEERS="$(docker run -eBUILD_COLOR_VARIANT=green -v $PWD:/app denoland/deno:1.46.3 run --allow-read=peers.json --allow-env=BUILD_COLOR_VARIANT /app/peers.js)"
  - echo "Building $VARIANT with persistent peers $PEERS"
  - docker build $PARAMETERIZED -t "$VARIANT" --build-arg "PEERS=$PEERS" .

  ### Image that connects to all known peers throgh blue proxy with default config
  - export VARIANT="$IMAGE-all-blue"
  - >+
    export PEERS="$(docker run -eBUILD_COLOR_VARIANT=blue -v $PWD:/app denoland/deno:1.46.3 run --allow-read=peers.json --allow-env=BUILD_COLOR_VARIANT /app/peers.js)"
  - echo "Building $VARIANT with persistent peers $PEERS"
  - docker build $PARAMETERIZED -t "$VARIANT" --build-arg "PEERS=$PEERS" .
