#!/bin/sh

# Set the container name or ID
CONTAINER_NAME_OR_ID=$1

# Check if container name or ID is provided
# Note: this requires you to have previously
# built the docker image using the Dockerfile
if [ -z "$CONTAINER_NAME_OR_ID" ]; then
  echo "Usage: ./run <container_name_or_id>"
  exit 1
fi

# Function to start the Docker container
start_container() {
  echo "Starting Docker container: $CONTAINER_NAME_OR_ID"
  docker run -d --network host --name namada-custom "$CONTAINER_NAME_OR_ID" > /dev/null
  if [ $? -eq 0 ]; then
    echo "Docker container started."
  else
    echo "Failed to start Docker container."
    exit 1
  fi
}

# Function to start simpleproxy
start_proxy() {
  echo "Starting simpleproxy..."
  simpleproxy -L :26666 -R 165.227.42.204:26656 &
  PROXY_PID=$! # Store the PID of simpleproxy
  echo "simpleproxy started with PID: $PROXY_PID"
}

# Function to stop simpleproxy
stop_proxy() {
  if [ -n "$PROXY_PID" ]; then
    echo "Stopping simpleproxy (PID: $PROXY_PID)..."
    kill $PROXY_PID
    wait $PROXY_PID 2>/dev/null
    echo "simpleproxy stopped."
  else
    echo "No simpleproxy process found."
  fi
}

# Check if the container is running
if [ "$(docker inspect -f '{{.State.Running}}' "$CONTAINER_NAME_OR_ID" 2>/dev/null)" != "true" ]; then
  echo "Docker container is not running. Starting it now..."
  start_container
else
  echo "Docker container is already running."
fi

# TODO: figure out a more efficient way to await initial chan setup.
# The problem lies in the fact the initial token distribution is
# deterministic (based on a static config file), but not ordered. This
# makes the intial assumption of "waiting for the last address to
# receive their allocation and start the proxy" not feasible.
echo "Waiting for initial chain initialization"
sleep 60

start_proxy

echo "Monitoring logs for container: $CONTAINER_NAME_OR_ID"


docker logs -f "$CONTAINER_NAME_OR_ID" --tail 10 2>&1 | while IFS= read -r line; do
  if echo "$line" | grep -q "Began a new epoch"; then
    echo "New epoch started. Stopping simpleproxy..."
    
    # Stop simpleproxy
    stop_proxy
    
    # Wait for 1 minute before restarting simpleproxy
    # TODO: here we have to await the undexer to finish indexing and only
    # then resume the proxy so that we don't miss data.
    echo "Waiting for 1 minute before restarting simpleproxy..."
    sleep 60
    
    # Restart simpleproxy
    start_proxy
  fi
done